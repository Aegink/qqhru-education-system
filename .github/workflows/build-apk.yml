name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      debug_build:
        description: 'Enable debug build with verbose output'
        required: false
        default: 'false'
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git zip unzip openjdk-17-jdk python3-pip autoconf libtool pkg-config \
          zlib1g-dev libncurses-dev libncursesw5-dev libtinfo6 cmake libffi-dev \
          libssl-dev build-essential

    - name: Set up Java environment
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
        echo "/usr/lib/jvm/java-17-openjdk-amd64/bin" >> $GITHUB_PATH

    - name: Install Android SDK and build-tools
      run: |
        # 创建Android SDK目录
        mkdir -p $HOME/android-sdk/cmdline-tools
        cd $HOME/android-sdk/cmdline-tools

        # 下载Android命令行工具
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p latest
        mv cmdline-tools/* latest/ || echo "No files to move"

        # 设置环境变量
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "PATH=$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools:$PATH" >> $GITHUB_ENV

        # 设置当前会话的环境变量
        export ANDROID_HOME=$HOME/android-sdk
        export PATH=$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools:$PATH

        # 接受许可协议
        echo "y" | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null 2>&1 || echo "License acceptance completed"

        # 安装必要的SDK组件（不包括NDK，让buildozer管理）
        echo "Installing Android SDK components..."
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "build-tools;34.0.0" \
          "build-tools;33.0.2" \
          "platforms;android-34" \
          "platforms;android-33" \
          "tools" || echo "Some components may have failed to install"

        # 创建传统的tools目录结构（buildozer期望的）
        mkdir -p $HOME/android-sdk/tools/bin
        ln -sf $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager $HOME/android-sdk/tools/bin/sdkmanager

        # 验证安装
        echo "Verifying Android SDK installation..."
        ls -la $HOME/android-sdk/
        ls -la $HOME/android-sdk/build-tools/ || echo "build-tools not found"
        ls -la $HOME/android-sdk/platform-tools/ || echo "platform-tools not found"
        ls -la $HOME/android-sdk/tools/bin/ || echo "tools/bin not found"

        # 检查aidl工具
        if [ -f "$HOME/android-sdk/build-tools/34.0.0/aidl" ]; then
          echo "aidl tool found in build-tools/34.0.0/"
        else
          echo "aidl tool not found, checking other build-tools versions..."
          find $HOME/android-sdk/build-tools/ -name "aidl" || echo "aidl not found anywhere"
        fi

        # 检查sdkmanager
        if [ -f "$HOME/android-sdk/tools/bin/sdkmanager" ]; then
          echo "sdkmanager found in tools/bin/"
        else
          echo "sdkmanager not found in tools/bin/"
        fi

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer==1.5.0 cython==3.0.10 virtualenv
        pip install -r requirements.txt

    - name: Install additional dependencies for buildozer
      run: |
        sudo apt-get install -y \
          libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
          libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev \
          libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          libjpeg-dev libpng-dev libfreetype6-dev libffi-dev \
          libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev \
          libncurses5-dev libncursesw5-dev xz-utils tk-dev

    - name: Create assets if not exist
      run: |
        echo "Checking for required assets..."
        if [ ! -f "assets/icon.png" ] || [ ! -f "assets/presplash.png" ]; then
          echo "Creating missing assets..."
          python create_assets.py
        else
          echo "All required assets exist"
        fi

    - name: Clean previous builds
      run: |
        # 清理可能存在的构建缓存
        rm -rf .buildozer || echo "No .buildozer directory to clean"
        rm -rf bin || echo "No bin directory to clean"

        # 清理buildozer全局缓存
        rm -rf $HOME/.buildozer || echo "No global .buildozer cache to clean"

    - name: Setup buildozer
      run: |
        # 确保buildozer目录存在
        mkdir -p $HOME/.buildozer/android/platform

        # 显示buildozer版本
        buildozer --version

        # 显示环境信息
        echo "Java version:"
        java -version
        echo "Python version:"
        python --version
        echo "Android SDK location:"
        echo $ANDROID_HOME

        # 设置buildozer使用我们安装的SDK
        echo "Configuring buildozer to use installed SDK..."

        # 确保buildozer目录结构存在
        mkdir -p $HOME/.buildozer/android/platform

        # 如果buildozer的SDK目录存在，先删除
        if [ -d "$HOME/.buildozer/android/platform/android-sdk" ]; then
          rm -rf $HOME/.buildozer/android/platform/android-sdk
        fi

        # 复制我们的SDK到buildozer期望的位置
        cp -r $HOME/android-sdk $HOME/.buildozer/android/platform/android-sdk

        # 验证复制结果
        echo "Verifying buildozer SDK setup..."
        ls -la $HOME/.buildozer/android/platform/android-sdk/
        ls -la $HOME/.buildozer/android/platform/android-sdk/tools/bin/ || echo "tools/bin not found in buildozer SDK"

    - name: Build APK with Buildozer (with retry)
      run: |
        # 清理可能冲突的环境变量
        unset ANDROID_NDK
        unset ANDROID_NDK_HOME
        unset ANDROID_NDK_ROOT
        unset ANDROID_SDK_ROOT

        # 设置所有必要的环境变量
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
        export ANDROID_HOME=$HOME/android-sdk
        export PATH=$JAVA_HOME/bin:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/34.0.0:$PATH

        # 显示环境信息
        echo "Environment variables:"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "PATH: $PATH"

        # 验证关键工具
        echo "Verifying tools:"
        which java && java -version
        which aidl && echo "aidl found" || echo "aidl not found in PATH"
        ls -la $ANDROID_HOME/build-tools/34.0.0/aidl || echo "aidl not found in build-tools"
        ls -la $ANDROID_HOME/tools/bin/sdkmanager || echo "sdkmanager not found in tools/bin"

        # 验证buildozer SDK
        echo "Verifying buildozer SDK:"
        ls -la $HOME/.buildozer/android/platform/android-sdk/tools/bin/sdkmanager || echo "buildozer sdkmanager not found"

        # 显示当前配置
        echo "Current buildozer.spec Android configuration:"
        grep -E "android\.(api|minapi|ndk|archs)" buildozer.spec || echo "No Android config found"

        # 显示最终环境变量
        echo "Final environment variables:"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "PATH: $PATH"
        env | grep -E "(ANDROID|JAVA|NDK)" || echo "No Android/Java/NDK env vars found"

        # 构建APK，使用详细日志
        echo "Starting APK build with detailed logging..."
        echo "Build configuration:"
        echo "- Architecture: arm64-v8a only"
        echo "- API Level: 34"
        echo "- Min API: 21"
        echo "- NDK: Let buildozer manage (25b)"

        # 单次构建，使用最详细的日志
        echo "Starting buildozer build with timeout..."

        # 设置构建超时为45分钟
        timeout 2700 buildozer --verbose android debug
        BUILD_EXIT_CODE=$?

        if [ $BUILD_EXIT_CODE -eq 0 ]; then
          echo "Build successful!"
        elif [ $BUILD_EXIT_CODE -eq 124 ]; then
          echo "Build timed out after 45 minutes"
          exit 1
        else
          echo "Build failed with exit code $BUILD_EXIT_CODE"

          # 检查最近的错误日志
          echo "=== Recent buildozer output ==="
          tail -100 ~/.buildozer/android/platform/python-for-android/dist/*/build.log 2>/dev/null || echo "No build.log found"

          echo "=== Checking for compilation errors ==="
          find $HOME/.buildozer -name "*.log" -newer /tmp -exec grep -l "error\|Error\|ERROR" {} \; | head -3 | while read logfile; do
            echo "=== Errors in $logfile ==="
            grep -A5 -B5 "error\|Error\|ERROR" "$logfile" | tail -20
          done

          exit 1
        fi

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk

    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        files: bin/*.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
